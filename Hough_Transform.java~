/*								INDIAN SCHOOL OF MINES, DHANBAD.										
This is the implementation of Hough-Transform as project by
1. Sajid Hussain, 2012JE0742
2. Avinash Bhagat, 2012JE0613
3. Deep Sah, 2012JE0634
4. Uttam Chaudry, 2012JE0823
5. Aditya Singh, 2012JE0604

Under the supervision of Dr.Shushanta Mukhopadhay, Asst Prof, CSE, ISM. Submitted on 5, May 2014.

Sample execution : HoughTransform image.jpg image1.jpg 100 200 100(op)

*/

import java.io.File;
import javax.imageio.*;
import java.awt.image.*;
import java.io.IOException;



class ArrayData // The Data-Structure to store the image in a linear array and set of operations
{
    public final int[] dataArray; // Image is stored in this linear array.
    public final int width;       
    public final int height;
 
    public ArrayData(int width, int height) //constructor of this class when given width and height
    {
      this(new int[width * height], width, height);
    }
 
    public ArrayData(int[] dataArray, int width, int height) // constructor of this class when passed with a predefined ArrayData
    {
      this.dataArray = dataArray;
      this.width = width;
      this.height = height;
    }
 
    public int get(int x, int y) // To get the pixel value at the coordinate (x,y)
    {  return dataArray[y * width + x];  }
 
    public void set(int x, int y, int value) // To set the pixel value at the co-ordinate (x,y)
    {  dataArray[y * width + x] = value;  }
 
    public void accumulate(int x, int y, int delta)// To increment the value of the pixel at co-ordinate (x,y) by a value delta
    {  set(x, y, get(x, y) + delta);  }
 
    public boolean contrast(int x, int y, int minContrast)// Return true if the pixel(x,y) is a edge pixel
    {
      int centerValue = get(x, y);
      for (int i = 8; i >= 0; i--)
      {
        if (i == 4)
          continue;
        int newx = x + (i % 3) - 1;
        int newy = y + (i / 3) - 1;
        if ((newx < 0) || (newx >= width) || (newy < 0) || (newy >= height))
          continue;
        if (Math.abs(get(newx, newy) - centerValue) >= minContrast)
          return true;
      }
      return false;
    }
 
    public int getMax() // Returns the value of the largest pixel in the data array
    {
      int max = dataArray[0];
      for (int i = width * height - 1; i > 0; i--)
        if (dataArray[i] > max)
          max = dataArray[i];
      return max;
    }
}
 
 
public class Hough_Transform // One single class for this project.
{
  public static ArrayData houghTransform(ArrayData inputData, int thetaAxisSize, int rAxisSize, int minContrast) 
  {
    int width = inputData.width;
    int height = inputData.height;
    int maxRadius = (int)Math.ceil(Math.hypot(width, height));
    int halfRAxisSize = rAxisSize >>> 1;
    ArrayData outputData = new ArrayData(thetaAxisSize, rAxisSize);
    // x output ranges from 0 to pi
    // y output ranges from -maxRadius to maxRadius
    double[] sinTable = new double[thetaAxisSize];
    double[] cosTable = new double[thetaAxisSize];
    for (int theta = thetaAxisSize - 1; theta >= 0; theta--)
    {
      double thetaRadians = theta * Math.PI / thetaAxisSize;
      sinTable[theta] = Math.sin(thetaRadians);
      cosTable[theta] = Math.cos(thetaRadians);
    }
 
    for (int y = height - 1; y >= 0; y--)
    {
      for (int x = width - 1; x >= 0; x--)
      {
        if (inputData.contrast(x, y, minContrast))
        {
          for (int theta = thetaAxisSize - 1; theta >= 0; theta--)
          {
            double r = cosTable[theta] * x + sinTable[theta] * y;
            int rScaled = (int)Math.round(r * halfRAxisSize / maxRadius) + halfRAxisSize;
            outputData.accumulate(theta, rScaled, 1);
          }
        }
      }
    }
    return outputData;
  }
 
  
  public static ArrayData getArrayDataFromImage(String filename) throws IOException // To extract the image details into the ArrayData after converting it into greyscale
  {
    BufferedImage inputImage = ImageIO.read(new File(filename));
    int width = inputImage.getWidth();
    int height = inputImage.getHeight();
    int[] rgbData = inputImage.getRGB(0, 0, width, height, null, 0, width);
    ArrayData arrayData = new ArrayData(width, height);
    // Flip y axis when reading image
    for (int y = 0; y < height; y++)
    {
      for (int x = 0; x < width; x++)
      {
        int rgbValue = rgbData[y * width + x];
        rgbValue = (int)(((rgbValue & 0xFF0000) >>> 16) * 0.30 + ((rgbValue & 0xFF00) >>> 8) * 0.59 + (rgbValue & 0xFF) * 0.11);
        arrayData.set(x, height - 1 - y, rgbValue);
      }
    }
    return arrayData;
  }
 
  public static void writeOutputImage(String filename, ArrayData arrayData) throws IOException // Draws the accumulator image on the screen
  {
    int max = arrayData.getMax();
    BufferedImage outputImage = new BufferedImage(arrayData.width, arrayData.height, BufferedImage.TYPE_INT_ARGB);
    for (int y = 0; y < arrayData.height; y++)
    {
      for (int x = 0; x < arrayData.width; x++)
      {
        int n = Math.min((int)Math.round(arrayData.get(x, y) * 255.0 / max), 255);
        outputImage.setRGB(x, arrayData.height - 1 - y, (n << 16) | (n << 8) | n | -0x01000000);
      }
    }
    ImageIO.write(outputImage, "PNG", new File(filename));
    return;
  }
 
  public static void main(String[] args) throws IOException 
  {
    ArrayData inputData = getArrayDataFromImage(args[0]);
    int minContrast = (args.length >= 4) ? 64 : Integer.parseInt(args[4]);
    ArrayData outputData = houghTransform(inputData, Integer.parseInt(args[2]), Integer.parseInt(args[3]), minContrast);
    writeOutputImage(args[1], outputData);
    return;
  }
}
